# -*- coding: utf-8 -*-
"""Minu Choi DS - Alphabet Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QaOUIPGIM5umMcWqm7cnN3GrGIkcXTiC
"""

#0
!pip install english_words
from english_words import get_english_words_set
words = get_english_words_set(['web2'], lower=True)

#1
print(type(words)) #returns 'set'
wordlist = list(words) #converting set to list
print(len(wordlist))

#2
wordlist[:10]
# I noticed that the words are in no particular order. The position of these words seem randomized.

#3
alpha_list = sorted(wordlist)
print(alpha_list[:10])

#4
words_startingwith_a = sum(word.startswith('a') for word in alpha_list)
print(words_startingwith_a)

#5
words_with_q = sum('q' in word for word in alpha_list)
print(words_with_q)

words_without_e = sum('e' not in word for word in alpha_list)
print(words_without_e / len(words)) #multiplying the output by 100 would give the percentage.

#6
import numpy as np
wordlistnp = np.array(alpha_list)
alphabet = [chr(i) for i in range(ord('a'),ord('z')+1)]
# This code creates a list of all the letters in the English alphabet. Because it is in square brackets, it makes a list.
# The ord() function finds the number for a character. In this case, from 'a' to 'z'. The +1 ensures that the list stops at 'z'.
# The for loop means that for each value in the range, the chr(i) will convert that number back into its corresponding letter.
print(alphabet)

#7
import matplotlib.pyplot as plt

x = alphabet
y = [sum(word.startswith(letter) for word in alpha_list) for letter in alphabet]
# 'word.startswith(letter)' returns 'True' if the word starts with a certain letter, but if not, it returns 'False.'
# the 'sum()' function adds up these 'True' and 'False' for each word in alpha_list.

plt.bar(x, y, color='g')
plt.plot()

plt.xlabel("alphabet")
plt.ylabel("number of words")
plt.title("Number of Words Starting With Each Letter in the Alphabet")
plt.show()

#8
six_longest = sorted(alpha_list, key = len, reverse = True) [:6]
# The key is set to len; it will sort alpha_list based on the length of words.
# The 'reverse = True' will sort alpha_list in descending order which will have the longest words first.
print(six_longest)

#9
word_length_counts = {}
# This dictionary will store the number of words for each length.
# As we learned in class, the keys are the lengths of the words, and the values are the number of words of each length.

for word in alpha_list: # Begins a loop that iterates each word in alpha_list.
    length = len(word) # Calculates the length of the current word
    if length in word_length_counts:
        word_length_counts[length] += 1 # If the length of the current word is a key, it increases the count for this word length.
    else:
        word_length_counts[length] = 1 # If the length of the current word is not in a key, this creates a new key-value pair and
        # will begin to count for this word length.

x = list(word_length_counts.keys()) # The x-axis of the histogram is set to the keys which are the length of the words.
y = [word_length_counts[key] for key in x] # The y-axis is set to the values which are the number of words of each length.

plt.bar(x, y, color='blue')

plt.xlabel('Length of Words')
plt.ylabel('Number of Words for Each Length')
plt.title('Histogram of Number of Words of Each Lengths')
plt.show()
# The most common length of a word in alpha_list is 9, shown by the peak of the histogram.

#11
words_with_v_and_a = sum('v'in word and 'a' in word for word in alpha_list)
print(words_with_v_and_a)

words_with_w_and_l = sum('w'in word and 'l' in word for word in alpha_list)
print(words_with_w_and_l)
# In order to get the output, the system has to loop through alpha_list once.
# It took my computer 0 second to run these codes according to Google Colab.

# (Not a questions in the assignment, this was an attempt at a challenge given in class)
alphabet = [chr(i) for i in range(ord('a'), ord('z')+1)]

# Dictionary to hold the count of words starting with each letter
words_starting_with = {letter: 0 for letter in alphabet}

for word in alpha_list:
    if word[0] in words_starting_with:
        words_starting_with[word[0]] += 1

print(words_starting_with)

#Bonus 1
pair_counts = {} # starts an empty dictionary

for first_letter in range(ord('a'), ord('z') + 1):
  # this starts a loop that will iterate over each letter as the first letter in the pair.
  # the reason for using the 'ord()' function is because the 'range()' function cannot iterate over characters.
    for second_letter in range(first_letter + 1, ord('z') + 1):
      # this begins a nested loop that starts with the letter following first_letter and goes through 'z'
      # it will create pairs such as 'ab' but not pairs such as 'ba' or 'aa'
        pair = chr(first_letter) + chr(second_letter)
        # this will convert the letters back to their character form because we are interested in knowing the results in letters not integers.
        pair_counts[pair] = sum(pair[0] in word and pair[1] in word for word in alpha_list)
        # this counts the number of words in alpha_list that contain both letters in the pair
        # it then allocates this count to the correct entry in the dictionary.

max_pair = max(pair_counts, key=pair_counts.get)
# this finds the letter pair, which is the key, in pair_counts with the highest value
max_count = pair_counts[max_pair]
# this returns the count of max_pair
min_pair = min(pair_counts, key=pair_counts.get)
# this finds the letter pair, which is the key, in pair_counts with the lowest value
min_count = pair_counts[min_pair]
# this returns the count of min_pair

print(max_pair, max_count, min_pair, min_count)
