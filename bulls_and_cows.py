# -*- coding: utf-8 -*-
"""Minu Choi DS - Bulls and Cows

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_mApGjY4Ej2GWoQIiLNGDQy3Xo6eTHV4

### Goal:  program this game
In this assignment you will program a version of an old game called Bulls and Cows.  It is somewhat similar to Wordle, but with numbers instead of words (and various other differences . . . read carefully!).

The game is played like this:  
1. The computer will choose a secret code that the player is trying to guess.
2. The secret code will be 4 digits long.  It will use only the digits 1-6, and it will have no repeated digits.  For example the secret code might be 1326 or 6241 but it cannot be 2652 or 4913 or 2601.
3. The computer will prompt the user for a guess, and the user will guess.  The guess must follow the same rules (4 digits long, only use digits 1-6, no repeats).  The program should not allow an invalid guess.
4. After each guess, the computer will give feedback to the user as follows:  
(i) Each digit of the guess that is in the secret code and in the correct position is called a Bull (B).  
(ii) Each digit of the guess that exists somewhere in the secret code, but *not* in the same position as in the guess, is called a Cow (C).  
(iii) A digit of the guess that doesn't occur anywhere in the secret code is called a miss (X).  
The computer will inform the user how many Bulls, how many Cows, and how many misses the user's guess had.  
The feedback will always start with B's, then list C's, then list X's.  
For example if the secret code is 1326  
and the guess is 4316  
then the computer should respond with "BBCX"  
because there are two Bulls (the 3 and the 6 are Bulls, because they occur in the same position in the guess as in the secret code),  
one Cow (the 1, which is a correct digit but in the wrong position),  
and one Miss (the 4, which does not occur anywhere in the secret code).  
> **Important:** the feedback string should always list the Bulls first, then the Cows, then the Misses.  It should **not** tell the user which digits are which!  The only information in the feedback string is how many of each there are.  In the example above, for instance, the feedback is **not** "XBCB" but rather "BBCX".  This is different from Wordle, if you are familiar with that game.
5. The user should then be prompted for another guess.  This guess-with-feedback process should be repeated until the user gets the correct code, at which point the computer should indicate that they have won the game.  However, the user should only be allowed 6 guesses; if they don't guess correctly in 6 attempts, then following the feedback from their final guess they should get a message that they have lost the game, and the secret code should be revealed.

### Steps
We will build this game using several functions.  

1. **Count the Bulls:**  
Write a function that takes two lists of the same length, and returns the number of Bulls.  That is, it should return the number of indices where the lists contain the same element.  *(Note:  you don't have to check that the entries are between 1 and 6, or that there are no repeats, etc.  A different function will do that.)*

> A sample run might look like
```
first = [11, 3, 17, 5, 1]
second = [20, 2, 17, 3, 1]
count_bulls(first,second)
```
```
 2
```

Define your function in the code chunk below.  The function definition command and the return command are pre-populated for you.  You just have to fill in the part which does the actual counting.  I recommend using a list comprehension to do this.
"""

# the Bull-counting function
first = [11, 3, 17, 5, 1]
second = [20, 2, 17, 3, 1]
def count_bulls(first, second):
  '''
  Takes two lists of the same length and computes the number of positions where the list entries agree.
  '''
  num_bulls = 0
  for i in range(len(first)):
    if first[i] == second[i]:
      num_bulls += 1
    else:
      num_bulls = num_bulls

  return num_bulls

count_bulls(first, second)

"""Add code and/or text chunks below to demonstrate that you have tested your code and that it works correctly.

2. **Count something else:**  
To count the cows it will be helpful first to count how many of the elements occur in both strings, without paying attention their positions.
Write a function called `count_animals` that takes two lists of the same length, and returns the number of elements of the second list that are also in the first list.  (In the game setting, each such element is either a Bull or a Cow, but don't worry about which is which for this problem.)
You may assume the lists do not contain repeated elements, since this will be the case when the function is called in the game.

> This time a sample run might look like
```
first = [11, 3, 17, 5, 1]
second = [20, 2, 17, 3, 1]
count_animals(first,second)
```
```
 3
```

This one isn't started for you.  Remember to include a docstring.  This can also be done using a list comprehension, similar to the previous function.
"""

# define your function here
def count_animals(first, second):
  '''
  Takes two lists of the same length and computes the number of instances where two lists contain the same element.
  '''
  num_bulls = 0
  for i in first:
    num_bulls += second.count(i)

  return num_bulls

count_animals(first, second)

"""Again, demonstrate below that you have tested your code and that it works.

3. **Count the cows:**  
Write a function called `count_cows` that counts the cows.  
> This time a sample run might look like
```
first = [11, 3, 17, 5, 1]
second = [20, 2, 17, 3, 1]
count_cows(first,second)
```
```
 1
```
*Use the two previously defined functions to help you!  
In fact, remember that the only reason we wrote the `count_animals` function was to help count the cows.*

You can do this with only two lines of code, not counting documentation!
"""

# put the Cow counting function here

def count_cows(first, second):
  '''
  Computes the number of elements in the second list that are in the first list but not in the same position.
  '''
  return count_animals(first, second) - count_bulls(first, second)

count_cows(first, second)

"""4. **Create feedback string**  
Write a `build_response_str` function that takes three numbers, say `b,c,l`, and outputs a string of total length `l` that consists of `b` B's, followed by `c` C's, and the rest X's (until the total length is `l`).

> Sample run:
```
build_response_str(4,3,9)
```
```
BBBBCCCXX
```
"""

# define your function here
def build_response_str(b, c, l):
  '''
  This function creates a feedback string based on the counts of correct guesses. 'B's mean exact matches.
  'C's mean correct numbers but in the wrong position. 'X's mean incorrect guesses (position and number)
  '''
  x = l - (b + c)

  str_output = 'B' * b + 'C' * c + 'X' * x
  return str_output

build_response_str(4, 3, 9)

"""Test your code here.

5.  **Generate feedback for guesses**  
Write a function `response(first,second)` that takes two lists of the same length, and outputs a string consisting of some number of B's followed by some number of C's followed by some number of X's, where the numbers correspond to the things we counted above.  That is, if `first` were the secret code in the game and `second` were the user's guess, then we would print one B for each Bull, one C for each Cow, and one X for each Miss. The total output string should have the same length as the input strings.

> Sample run:
```
first = [11, 3, 17, 5, 1]
second = [20, 2, 17, 3, 1]
response(first,second)
```
```
 BBCXX
```

With all the functions you've already put in place, this should be simple.  Test your code once it's written.
"""

def response(first, second):
    '''
    Similar to the 'build_response_str' function, this function also creates a feedback string based
    on the counts of correct guesses. 'B's mean exact matches.'C's mean correct numbers
    but in the wrong position. 'X's mean incorrect guesses (position and number).
    '''
    bulls = count_bulls(first, second)
    animals = count_animals(first, second)
    cows = count_cows(first, second)
    wrong = len(first) - animals

    return 'B' * bulls + 'C' * cows + 'X' * wrong

response(first, second)

"""6.  **Choose the secret code**  
The `random` package, and specifically the `sample` sub-package, is useful for generating random samples.  Try running the following lines of code several times.


"""

from random import sample

sample(range(1,7),4)  # the first argument is the population to be sampled, and the second is the number of samples
                      # recall that `range(a,b)` includes `a` but stops at `b-1`

"""What type of object is returned by the `sample` function?

The sample function returns a list.

7. **Verify the guess**  
Finish writing a function called `get_guess` (started below) to prompt the user for a guess and then make sure the input is valid according to the rules of the game.
The prompt is already given.  Note that the `list` command converts the input into a list of characters so that it can be passed to the other functions (which are expecting lists).   
>**Alert:  you will likely have to think more about data types before this is all over.**
"""

def get_guess():
  '''
  This function prompts the user for a guess that follows the game's rules. The first rule
  is that it must have 4 unique digits. The second rule is that the user only gets to guess
  numbers between 1 and 6. In addition, the function will repeatedly prompt until the user
  enters a valid input. That is, the user cannot repeat numbers, enter strings, floats, etc).
  '''
  while True:
    guess_str = input("Enter your guess (4 unique digits, 1-6): ")

    try:
      guess = [int(digit) for digit in guess_str]

    except ValueError:
        print("Please enter numeric digits only.")
        continue

    if len(guess) != 4:
        print("Your guess must be exactly 4 digits long.")
        continue

    if any(digit < 1 or digit > 6 for digit in guess):
        print("All digits must be between 1 and 6.")
        continue

    if len(set(guess)) != len(guess):
        print("All digits must be unique.")
        continue

    return guess

get_guess()

# I have conducted tests of this code below. As shown, the tests check for every condition.
# The function will prompt the user for an input until all the conditions are met.

"""As usual, test your code.  What type of objects are we dealing with here?

Guess is a list of strings with each string representing a character (digit) entered by the user. However, after the conversion, it is a list of integers.

8. **Put it all together**  
Finally, fill in the details of the function `bulls_cows` below so that it will play the game of Bulls and Cows when called.  Note that the function takes no arguments and returns nothing.
"""

from random import sample

def count_bulls(first, second):
  '''
  Takes two lists of the same length and computes the number of positions where the list entries agree.
  '''
  num_bulls = 0
  for i in range(len(first)):
    if first[i] == second[i]:
      num_bulls += 1
    else:
      num_bulls = num_bulls

  return num_bulls

def count_animals(first, second):
  '''
  Takes two lists of the same length and computes the number of instances where two lists contain the same element.
  '''
  num_bulls = 0
  for i in first:
    num_bulls += second.count(i)

  return num_bulls

def count_cows(first, second):
  '''
  Computes the number of elements in the second list that are in the first list but not in the same position.
  '''
  return count_animals(first, second) - count_bulls(first, second)

def response(first, second):
  '''
  Similar to the 'build_response_str' function, this function also creates a feedback string based
  on the counts of correct guesses. 'B's mean exact matches.'C's mean correct numbers
  but in the wrong position. 'X's mean incorrect guesses (position and number).
  '''
  bulls = count_bulls(first, second)
  animals = count_animals(first, second)
  cows = count_cows(first, second)
  wrong = len(first) - animals

  return 'B' * bulls + 'C' * cows + 'X' * wrong

def get_guess():
  '''
  This function prompts the user for a guess that follows the game's rules. The first rule
  is that it must have 4 unique digits. The second rule is that the user only gets to guess
  numbers between 1 and 6. In addition, the function will repeatedly prompt until the user
  enters a valid input. That is, the user cannot repeat numbers, enter strings, floats, etc).
  '''
  while True:
    guess_str = input("Enter your guess (4 unique digits, 1-6): ")

    try:
      guess = [int(digit) for digit in guess_str]

    except ValueError:
        print("Please enter numeric digits only.")
        continue

    if len(guess) != 4:
        print("Your guess must be exactly 4 digits long.")
        continue

    if any(digit < 1 or digit > 6 for digit in guess):
        print("All digits must be between 1 and 6.")
        continue

    if len(set(guess)) != len(guess):
        print("All digits must be unique.")
        continue

    return guess

def bulls_cows():
    '''
    Plays the game "Bulls and Cows."
    '''
    code = sample(range(1, 7), 4)

    for i in range(6):
        guess = get_guess()
        if code == guess:
            print("You guessed it!")
            return
        print(response(code, guess))
    print(f"You have run out of guesses. The secret code was {code}.")
    return

"""Play the game a few times below.  Make sure it behaves as you think it should!"""

bulls_cows()

bulls_cows()

bulls_cows()

"""9. **Reflect**  
Think of at least three ways you could change the rules or setup of the game, and in each case describe (in one sentence, you don't need to write code) what you would have to do to modify your code to play the new version of the game.  Use a text box below for each of your ideas.

(1) Allow users to have more guesses - I would change the loop condition in 'bulls_cows.' This would mean adjusting 'for i in range(6)' to 'i in range(10),' which increases the number of guesses to 10.

(2) Length of secret code - I would adjust the 'code = sample(range(1, 7), 4)' in the 'bulls_cows' function. I could either shorten or lengthen the secret code by manipualting the number 4 to either a smaller or greater number.

(3) Allow users to input repeated digits - I would simply remove the if statement in the 'get_guess' function. This would allow users to input repeated digits to know, for sure, whether a number is in the code or not.
"""
