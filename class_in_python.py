# -*- coding: utf-8 -*-
"""Minu Choi DS - Class in Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14nvrcR05ifV36HQpQu02gCScsAAlEqkH

1.  Define a class called `Person` that has attributes `lastName`, `firstName`, `mother`, and `father`.  Both `mother` and `father` should have default value `unknown`.

  Include a `__str__()` function that returns a string of the form '`firstName` `lastName`'.

  Include a `__repr__()` function that returns a string that can be evaluated to recreate the `Person` object.
"""

class Person:
  def __init__(self, lastName, firstName, mother = "unknown", father = "unknown"):
    self.lastName = lastName
    self.firstName = firstName
    self.mother = mother
    self.father = father

  def __str__(self):
    return f"{self.firstName} {self.lastName}"

  def __repr__(self):
    return (f"Person(lastName = {repr(self.lastName)}, "
            f"firstName = {repr(self.firstName)}, "
            f"mother = {repr(self.mother)}, "
            f"father = {repr(self.father)})")

"""Create a person (i.e., a `Person` object) called `p` with unknown parents.  (You will need to give your person a first and last name.) Check the type of `p`.  Include all inputs and outputs."""

class Person:
  def __init__(self, lastName, firstName, mother = "unknown", father = "unknown"):
    self.lastName = lastName
    self.firstName = firstName
    self.mother = mother
    self.father = father

  def __str__(self):
    return f"{self.firstName} {self.lastName}"

  def __repr__(self):
    return (f"Person(lastName={repr(self.lastName)}, "
            f"firstName={repr(self.firstName)}, "
            f"P's Mother={repr(self.mother)}, "
            f"P's Father={repr(self.father)})")

# type of p, inputs, and ouputs are in the next code block

"""Verify that your `__str__` and `__repr__` functions are doing what they are supposed to do.  Include all inputs and outputs."""

p = Person("Choi", "Minu")

print(str(p))

print(repr(p))

"""Suppose the mother of `p` has been found and is named Taylor Swift.  Create a new person named Taylor Swift, and make her the mother of `p`:

```
> p.mother
'Taylor Swift'
```
"""

class Person:
  def __init__(self, lastName, firstName, mother = "unknown", father = "unknown"):
    self.lastName = lastName
    self.firstName = firstName
    self.mother = mother
    self.father = father

  def __str__(self):
    return f"{self.firstName} {self.lastName}"

  def __repr__(self):
    return (f"Person(lastName={repr(self.lastName)}, "
            f"firstName={repr(self.firstName)}, "
            f"P's Mother={repr(self.mother)}, "
            f"P's Father={repr(self.father)})")

taylor = Person("Swift", "Taylor")

p = Person("Choi", "Minu", mother=taylor)

print(p)
print(f"P's Mother: {p.mother}")

"""2.  Add some methods to your class.  Start by copying the `class` definition you already wrote.  Then, inside the `class` definition:

  (a) Write a method called `unknownParent()` which returns `True` if any parent is 'unknown' and `False` otherwise.

  (b) Write a method called `maternalGrandmother()` which returns the mother's mother.  If the mother is unknown, it should return 'unknown'.


"""

class Person:
  def __init__(self, lastName, firstName, mother = "unknown", father = "unknown"):
    self.lastName = lastName
    self.firstName = firstName
    self.mother = mother
    self.father = father

  def __str__(self):
    return f"{self.firstName} {self.lastName}"

  def __repr__(self):
    return (f"Person(lastName={repr(self.lastName)}, "
            f"firstName={repr(self.firstName)}, "
            f"mother={repr(self.mother)}, "
            f"father={repr(self.father)})")

  def unknownParent(self):
    return self.mother == "unknown" or self.father == "unknown"

  def maternalGrandmother(self):
    if isinstance(self.mother, Person): # This will return grandmother if the mother is identified and her mother is outlined.
      return self.mother.mother
    else:
      return "unknown"

"""Create enough `Person` objects to test whether your methods are working properly.  Show all your inputs and outputs.  It is up to you to demonstrate that you have thoroughly tested the code.  You may use additional code and/or text chunks if it helps."""

grandmother = Person("Grandmother", "Minu")

mother = Person("Mom", "Minu", mother=grandmother) # This will create a person object for the mother with a known grandmother.

minu = Person("Choi", "Minu", mother=mother, father="unknown") # This will create a Person object for minu with known parents

danny = Person("Choi", "Danny") # This will create a Person object for another child whose parents are unknown.

print("Testing Minu:")
print("unknownParent():", minu.unknownParent())
print("maternalGrandmother():", minu.maternalGrandmother())

print("Testing Danny:")
print("unknownParent():", danny.unknownParent())
print("maternalGrandmother():", danny.maternalGrandmother())
