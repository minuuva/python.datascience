# -*- coding: utf-8 -*-
"""Minu Choi DS - Exploratory Data Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IZGjNT0laBAidb51kbjpgvh2kdfXft_c

## Pandas exercises 1

1. Import dependencies
"""

import pandas as pd

"""---"""

list = [98, 24, 46, 87, 33]

"""2. Convert `list` to a pandas series using `pd.Series`"""

pdseries = pd.Series(list)
pdseries

"""3. Take the above series and add an index that starts at 2 and steps by 3"""

new_index = range(2, 2 + 3*len(pdseries), 3)
pdseries_newindex = pd.Series(pdseries.values, index=new_index) # I created a new series so that I can apply the new index
pdseries_newindex

"""4. Create a dictionary of 4 names, ages, and careers   
Convert this dictionary to a pandas dataframe: `df`.  
Print the dataframe.
"""

df = pd.DataFrame({
    'name': ['Joe', 'John', 'Jason', 'Jake'],
    'age': [20, 21, 22, 23],
    'career': ["unemployed", "unemployed", "unemployed", "unemployed"]
})
print(df)

"""5. Name the index of `df` 'participant_id'.  
Print `df`.
"""

df.index.name = 'participant_id'
print(df)

"""6. Use a pandas function to determine the data types of the columns of `df`."""

df.dtypes

"""7. Using bracket notation, reference column `name`"""

df['name']

"""8. Using dot notation, reference column `name`"""

df.name

"""8. Reference column `name` and have it returned in a dataframe."""

namedf = df[['name']]
print(namedf)

"""9. Show the 3rd element in column `career`."""

df.career.iloc[2]

"""10.  Load the `iris` dataset that we used in class.  Use `iris` as the name of your data frame."""

import seaborn as sns
iris = sns.load_dataset('iris')
iris

"""11.  What is the correlation between the variables `sepal_length` and `sepal_width` for all the irises?"""

iris['sepal_length'].corr(iris['sepal_width'])

"""12.  Which of the three species has the highest correlation between `sepal_length` and `sepal_width`?  Show any calculations you use to support your answer."""

# iris[iris['species'] == 'setosa']: This part filters the data frame to only include rows where the species column equals 'setosa'.
# ['sepal_length']: This part selects the 'sepal_length' column from the filtered DataFrame.
# The .corr() function calculates the correlation coefficient between two series.
# iris[iris['species'] == 'setosa']['sepal_width']: This part filters the data frame for 'setosa' and selects the 'sepal_width' column.
# The same logic applies to the correlation calculation process for "versicolor" and "virginica"

setosa_correlation = iris[iris['species'] == 'setosa']['sepal_length'].corr(iris[iris['species'] == 'setosa']['sepal_width'])
print("Setosa:",setosa_correlation)

versicolor_correlation = iris[iris['species'] == 'versicolor']['sepal_length'].corr(iris[iris['species'] == 'versicolor']['sepal_width'])
print("Versicolor:",versicolor_correlation)

virginica_correlation = iris[iris['species'] == 'virginica']['sepal_length'].corr(iris[iris['species'] == 'virginica']['sepal_width'])
print("Vriginica:",virginica_correlation)

# I made a dictionary where the keys are the species and the values are the correlation I calculated above.
correlations = {
    "Setosa": setosa_correlation,
    "Versicolor": versicolor_correlation,
    "Virginica": virginica_correlation
}

# The following finds the species with the highest correlation using the max() function.
highest_correlation_species = max(correlations, key=correlations.get)
highest_correlation_value = correlations[highest_correlation_species]

print(f"The species with the highest correlation between sepal_length and sepal_width is {highest_correlation_species} with a correlation of {highest_correlation_value}")

"""13.  Among the four variables, the two that are most negatively correlated (overall) are `sepal_width` and `petal_length`.  (How do we know this?)  Determine the same thing but for each species separately:  for each species, which two variables have the most negative correlation?  Again, include calculations to support your answer."""

# This block of code is to prove that sepal_width and petal_length are the most negatively correlated variables.
# Answering the question, "How do we know this?"

# The following 6 lines of code identifies the correlation for each combination of variables.
sl_sw = iris['sepal_length'].corr(iris['sepal_width'])
sl_pl = iris['sepal_length'].corr(iris['petal_length'])
sl_pw = iris['sepal_length'].corr(iris['petal_width'])
sw_pl = iris['sepal_width'].corr(iris['petal_length'])
sw_pw = iris['sepal_width'].corr(iris['petal_width'])
pl_pw = iris['petal_length'].corr(iris['petal_width'])

# I created a dictionary to later choose the combination with the most negative correlation.
# The keys are the variables combination and the values are the correlation values.
correlations_v = {
    "sepal.length.sepal.width": sl_sw,
    "sepal.length.petal.length": sl_pl,
    "sepal.length.petal.width": sl_pw,
    "sepal.width.petal.length": sw_pl,
    "sepal.width.petal.width": sw_pw,
    "petal.length.petal.width": pl_pw
}

# This finds the combination with the lowest correlation
lowest_correlated_variables = min(correlations_v, key=correlations_v.get)
lowest_correlated_variables_value = correlations_v[lowest_correlated_variables]

print(f"The variables with the lowest correlation are {lowest_correlated_variables} with a correlation of {lowest_correlated_variables_value}")

# This block of code determines, for each species, which two variables have the most negative correlation

# Identical to question 12, the first line includes rows where the column equals Setosa.
# I created a new data frame called setosa_data that only includes data about Setosa.
# The second line calculates the correlation between variables for Setosa.
# The third line uses the .unstack() function which reshapes the setosa_corr DataFrame
# from a matrix into a series. Each element represents the correlation between a pair of variables.
# I learned about the unstack() function from the following url https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.unstack.html
# In The fourth code, idxmin() function is used to find the index (the pair of variables) that has the smallest correlation.
# The fifth code uses the min() function to return the minimum value within the pairs_setosa (third line)
# I used the same logic for the other two species. #Question for Grace: Is this possible without using the .unstack() method?

setosa_data = iris[iris['species'] == 'setosa']
setosa_corr = setosa_data.corr()
pairs_setosa = setosa_corr.unstack()
lowest_pair_setosa = pairs_setosa.idxmin()
lowest_value_setosa = pairs_setosa.min()
print(f"The two variables in Setosa with the lowest correlation are {lowest_pair_setosa} with a correlation of {lowest_value_setosa}")



versicolor_data = iris[iris['species'] == 'versicolor']
versicolor_corr = versicolor_data.corr()
pairs_versicolor = versicolor_corr.unstack()
lowest_pair_versicolor = pairs_versicolor.idxmin()
lowest_value_versicolor = pairs_versicolor.min()

print(f"The two variables in Versicolor with the lowest correlation are {lowest_pair_versicolor} with a correlation of {lowest_value_versicolor}")


virginica_data = iris[iris['species'] == 'virginica']
virginica_corr = virginica_data.corr()
pairs_virginica = virginica_corr.unstack()
lowest_pair_virginica = pairs_virginica.idxmin()
lowest_value_virginica = pairs_virginica.min()

print(f"The two variables in Virginica with the lowest correlation are {lowest_pair_virginica} with a correlation of {lowest_value_virginica}")

"""14.  Once again, the variables sepal_width and petal_length are negatively correlated. But for each individual species, these two variables are positively correlated. How is this possible? Explain this phenomenon. Use a data visualization if it helps.

"""

# Within each species, sepal_width and petal_length may be positively correlated.
# This means that species with wider sepals tend to have longer petals.
# However, when the data are not divided by species, sepal_width and petal_length may be negatively correlated.
# This means that one species might have wider sepals and longer petals, while another species might have narrower sepals and shorter petals.
# When all species are combined, the differences between species might overshadow the within-species correlations.
# The overall data might then show a negative correlation between sepal width and petal length
# This contrasts the positive correlation between the two variables within each species.
