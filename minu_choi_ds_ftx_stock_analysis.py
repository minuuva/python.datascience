# -*- coding: utf-8 -*-
"""Minu Choi DS - FTX Stock Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UvVi3AXRq949wfNind_w4SbfMJozCZv-

> **FTX** was a cryptocurrency exchange founded by Sam Bankman-Fried that saw both a spectacular rise and collapse between 2021 and 2022. At one point it had a valuation of $32B. In November Bankman-Fried was found guilty on seven counts of fraud and conspiracy.  His sentencing hearing is today.

The dataset for this assignment covers that rise and fall from the viewpoint of daily stock closing prices for FTX (ticker symbol `FTT`).

## 1. Load Libraries & Data

https://s3.amazonaws.com/ds1002-resources/data/ftx-2021-01-01--2023-12-31.csv

Import any necessary libraries and load the remote CSV file below into a DataFrame. **Resolve any import issues you need to.**
"""

import pandas as pd
import numpy as np
# In order to properly load the data, I used the delimiter method that I learned
# from the following url: https://realpython.com/python-csv/#:~:text=Optional%20Python%20CSV%20reader%20Parameters,-The%20reader%20object&text=delimiter%20specifies%20the%20character%20used,quote%20(%20'%20%22%20'%20).
ftx_data = pd.read_csv('ftx.csv', delimiter= ';')
ftx_data

"""## 2. Get Summary Data

In code, display how many rows and columns are in the raw dataset.
"""

ftx_data.shape
print(f'Number of rows: {ftx_data.shape[0]}')
print(f'Number of columns: {ftx_data.shape[1]}')

"""## 3. Clean and Organize the Data

Check for data quality.

- Resolve any empty values or duplicate rows.
- Order the data properly if necessary.
- Drop the following columns and save the dataframe: `timeOpen`, `timeClose`, `timeHigh`, `timeLow`, `marketCap`


"""

ftx_data = ftx_data.drop_duplicates()
# I added a condition that checks for columns with numeric values.
# This way, I can fill the missing values by the mean.
ftx_data = ftx_data.fillna(ftx_data.mean(numeric_only = True))
ftx_data = ftx_data.drop(columns = ['timeOpen', 'timeClose', 'timeHigh', 'timeLow', 'marketCap'])

"""Now display the first 10 rows of the cleaned dataset."""

ftx_data.head(10)

"""## 4. Calculate Daily Gains/Losses

Using Pandas, add a new column named `["close_change"]` to the dataframe that calculates the difference between daily closing prices for FTX. This will result in positive (growth) and negative (loss) values.

Note:
- Be careful about how you calculate this. Each row should calculate that difference from the row above it, which must be the previous calendar day.
- Hint: This is not complicated and does not require a for-loop.  See the Pandas review notebook for reference.
"""

# I decided to add the fillna() function given that the first value of the 'close_change' column will be NA.
ftx_data['close_change'] = ftx_data['close'].diff().fillna(0)
ftx_data

"""## 5. Identify Growth Days

Based on the daily change in closing prices calculated above, identify the top 10 days of positive growth for FTX.

Display your results in a table showing both the rate of change and their dates.
"""

# I learned to use the 'nlargest' function in the following url: https://www.w3schools.com/python/pandas/ref_df_nlargest.asp
top10_growth = ftx_data.nlargest(10, 'close_change')
top10_growth_table = top10_growth[['timestamp', 'close_change']]
top10_growth_table

"""## 6. Calculate the Percentage Rate of Change

Next, create a new column named `["rate_of_change"]` based on `["close_change"]`.

Use the Pandas Review notebook for reference. Again, this is an easy operation in Pandas and does not require a for-loop.
"""

# Again, I filled in the first two values of the 'rate_of_change' column with 0 given that one of them was NA and one was negative infinity.
ftx_data['rate_of_change'] = ftx_data['close_change'].pct_change().fillna(0) * 100
ftx_data['rate_of_change'].replace(-np.inf, 0, inplace=True)
ftx_data

"""## 7. Identify Days of Greatest Percentage Change

Based on the rate change column calculated above, identify the top 5 days of greatest positive rate change, and the top 5 days of greatest negative rate change.

Display your results in a table showing both the rate of change and their dates.
"""

top5_roc = ftx_data.nlargest(5, 'rate_of_change')
bottom5_roc = ftx_data.nsmallest(5, 'rate_of_change')
# In order to combine the two tables into one, I used the 'concat' function
# that I learned in the following url: https://pandas.pydata.org/docs/getting_started/intro_tutorials/08_combine_dataframes.html
roc_combined = pd.concat([top5_roc, bottom5_roc])
roc_table = roc_combined[['timestamp', 'rate_of_change']]
roc_table_sorted = roc_table.sort_values(by='rate_of_change', ascending=False)
roc_table_sorted

"""## 8. Plot the Data

Create two separate plots of the data -- one for the daily closing price and one for the daily gains/losses. These can be histograms or line plots.
"""

import matplotlib.pyplot as plt
# In my first attempt, I noticed that the timestamp, when shown as a x-axis,
# was not coherent. Therefore, I employed the 'pd.to_datetime' method to properly
# display the timestamp. This was covered in class: https://colab.research.google.com/drive/1mpnobQIpxqC2DS6Il-D82dLwE1PbvxsA
ftx_data['timestamp'] = pd.to_datetime(ftx_data['timestamp'])

x1 = ftx_data['timestamp']
y1 = ftx_data['close']
plt.figure(figsize=(10, 5))
plt.plot(x1, y1)
plt.xlabel("Timestamp")
plt.ylabel("Daily Closing Price")
plt.title("Daily Closing Price of FTX")
plt.show()

x2 = ftx_data['timestamp']
y2 = ftx_data['close_change']
plt.figure(figsize=(10, 5))
plt.plot(x2, y2)
plt.xlabel("Timestamp")
plt.ylabel("Daily Gains/Losses")
plt.title("Daily Gains/Losses in FTX value")
plt.show()

"""Combine the two plots from above into a single plot, displaying both together. Your plot should have two Y-axis scales, should differentiate the two values by color, and should include a legend."""

# For the following, I referenced a google colab notebook we covered in class.
# The url is https://colab.research.google.com/drive/1zeSSUmzGKQPh1wcZrVzz2KgWPt9Xjr2M
# There is a section called 'Superimposing Two Plots with Different Scales.'
import matplotlib.pyplot as plt

fig, ax1 = plt.subplots(figsize=(14, 7))

ax1.set_xlabel('Timestamp')
ax1.set_ylabel('Daily Closing Price', color = 'b')
ax1.plot(ftx_data['timestamp'], ftx_data['close'], color = 'b')
ax1.tick_params(axis='y', labelcolor = 'b')

ax2 = ax1.twinx()
ax2.set_ylabel('Daily Gains/Losses', color = 'g')
ax2.plot(ftx_data['timestamp'], ftx_data['close_change'], color = 'g')
ax2.tick_params(axis='y', labelcolor = 'g')

ax1.legend(['Daily Closing Price'], loc = 'upper left')
ax2.legend(['Daily Gains/Losses'], loc = 'upper right')
plt.title('Daily Closing Price and Gains/Losses of FTX')
plt.show()