# -*- coding: utf-8 -*-
"""Minu Choi DS - Image Filter

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LOgP6vyXwr_luPVX8eD1y7hDL63nPuqt
"""

import numpy as np

from skimage import io

photo = io.imread('creature.webp')

import matplotlib.pyplot as plt
plt.imshow(photo)

"""#For all 6 filters starting with the red filter below, I mainpulated the value of the third dimension.
0 = Red, 1 = Green, 2 = Blue. By setting 1 = 0, 2 = 0, I am able to apply the Red filter. By setting 0 = 0, 2 = 0, I set the green filter, and so on. I applied the filters on a copy of the original photo, as I noticed that if I continue to apply different filters on the same photo, the photo does not depict the correctly applied version (often times, just appearing as pitch black)
"""

def redfilter(photo):
    photo_copy = photo.copy()
    photo_copy[:, :, 1] = 0
    photo_copy[:, :, 2] = 0
    return photo_copy

red_filtered_photo = redfilter(photo)

plt.imshow(red_filtered_photo)
plt.show()

def greenfilter(photo):
    photo_copy = photo.copy()
    photo_copy[:, :, 0] = 0
    photo_copy[:, :, 2] = 0
    return photo_copy

green_filtered_photo = greenfilter(photo)

plt.imshow(green_filtered_photo)
plt.show()

def bluefilter(photo):
    photo_copy = photo.copy()
    photo_copy[:, :, 0] = 0
    photo_copy[:, :, 1] = 0
    return photo_copy

blue_filtered_photo = bluefilter(photo)

plt.imshow(blue_filtered_photo)
plt.show()

def randg_but_no_blue(photo):
  photo_copy = photo.copy()
  photo_copy[:, :, 2] = 0
  return photo_copy

randgnoblue_filtered = randg_but_no_blue(photo)

plt.imshow(randgnoblue_filtered)
plt.show()

def randb_but_no_green(photo):
  photo_copy = photo.copy()
  photo_copy[:, :, 1] = 0
  return photo_copy

randbnogreen_filtered = randb_but_no_green(photo)

plt.imshow(randbnogreen_filtered)
plt.show()

def gandb_but_no_red(photo):
  photo_copy = photo.copy()
  photo_copy[:, :, 0] = 0
  return photo_copy

gandbnored_filtered = gandb_but_no_red(photo)

plt.imshow(gandbnored_filtered)
plt.show()

"""#Below, I created a dictionary with keys depicting the name of the filters. The values are the filter function themselves. Then, I created a for loop to print out key, in order to label all the photos and also to print out the values which are the filtered photos themselves.

#The jpg file I used differs from the photo above. The URL of the jpg file is https://tinyjpg.com/images/social/website.jpg
"""

from skimage import io
url = input ("Enter the URL of a .jpg file: ")
photo = io.imread(url)
filters = {
    "Original": photo, "Red Filtered": redfilter(photo), "Green Filtered" : greenfilter(photo), "Blue Filtered" : bluefilter(photo),
"RedGreen NoBlue": randg_but_no_blue(photo), "RedBlue NoGreen": randb_but_no_green(photo), "GreenBlue NoRed": gandb_but_no_red(photo)}

for key in filters.keys():
    print(key)
    plt.imshow(filters[key])
    plt.show()

"""To verify that the original photo is equal to the combined photos of the three filters, I first created a combined image which adds the three filters. Then I apply, the filters to the original photo.

In order to compare the original photo and the combined photo, I created an if else statement that compares the values of the dimensions of the two photos. For better visualization of this, I printed the values using print(np.array()). As one will see, they are the same.
"""

def combine_filtered_photo(redfilter, greenfilter, bluefilter):
    combined_image = redfilter + greenfilter + bluefilter
    return combined_image

red_filtered_photo = redfilter(photo)
green_filtered_photo = greenfilter(photo)
blue_filtered_photo = bluefilter(photo)

combined_photo = combine_filtered_photo(red_filtered_photo, green_filtered_photo, blue_filtered_photo)

print(np.array(photo))
print(np.array(combined_photo))

if np.array_equal(photo, combined_photo):
    print("They are the same.")
else:
    print("They are not the same.")

"""#Below is an example of an output from a different photo. The jpg file URL for this photo is https://www.cleverfiles.com/howto/wp-content/uploads/2018/03/minion.jpg

---


"""

from skimage import io
url = input ("Enter the URL of a .jpg file: ")
photo = io.imread(url)
filters = {
    "Original": photo, "Red Filtered": redfilter(photo), "Green Filtered" : greenfilter(photo), "Blue Filtered" : bluefilter(photo),
"RedGreen NoBlue": randg_but_no_blue(photo), "RedBlue NoGreen": randb_but_no_green(photo), "GreenBlue NoRed": gandb_but_no_red(photo)}

for key in filters.keys():
    print(key)
    plt.imshow(filters[key])
    plt.show()

def combine_filtered_photo(redfilter, greenfilter, bluefilter):
    combined_image = redfilter + greenfilter + bluefilter
    return combined_image

red_filtered_photo = redfilter(photo)
green_filtered_photo = greenfilter(photo)
blue_filtered_photo = bluefilter(photo)

combined_photo = combine_filtered_photo(red_filtered_photo, green_filtered_photo, blue_filtered_photo)

print(np.array(photo))
print(np.array(combined_photo))

if np.array_equal(photo, combined_photo):
    print("They are the same.")
else:
    print("They are not the same.")